#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define SIZE 9
#define EMPTY 0
#define NUM_REMOVE 40

int board[SIZE][SIZE];
int solution[SIZE][SIZE];
int error_count = 0;
const int MAX_ERRORS = 5;

// 判斷該列是否安全
int isRowSafe(int row, int num) {
    for (int col = 0; col < SIZE; col++)
        if (board[row][col] == num)
            return 0;
    return 1;
}

// 判斷該欄是否安全
int isColSafe(int col, int num) {
    for (int row = 0; row < SIZE; row++)
        if (board[row][col] == num)
            return 0;
    return 1;
}

// 判斷 3x3 區域是否安全
int isBoxSafe(int startRow, int startCol, int num) {
    for (int row = 0; row < 3; row++)
        for (int col = 0; col < 3; col++)
            if (board[startRow + row][startCol + col] == num)
                return 0;
    return 1;
}

// 用於生成盤面的安全檢查（填數用）
int isSafe(int row, int col, int num) {
    return isRowSafe(row, num) &&
           isColSafe(col, num) &&
           isBoxSafe(row - row % 3, col - col % 3, num);
}

// 檢查玩家填入是否合法（根據當前盤面）
int isValidMove(int row, int col, int num) {
    // 同行
    for (int j = 0; j < SIZE; j++)
        if (board[row][j] == num)
            return 0;
    // 同列
    for (int i = 0; i < SIZE; i++)
        if (board[i][col] == num)
            return 0;
    // 同區
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[startRow + i][startCol + j] == num)
                return 0;
    return 1;
}

// 使用回溯法填滿整個盤面
int fillBoard() {
    for (int row = 0; row < SIZE; row++) {
        for (int col = 0; col < SIZE; col++) {
            if (board[row][col] == EMPTY) {
                int numbers[SIZE] = {1,2,3,4,5,6,7,8,9};
                for (int i = 0; i < SIZE; i++) {
                    int j = rand() % SIZE;
                    int temp = numbers[i];
                    numbers[i] = numbers[j];
                    numbers[j] = temp;
                }
                for (int i = 0; i < SIZE; i++) {
                    int num = numbers[i];
                    if (isSafe(row, col, num)) {
                        board[row][col] = num;
                        if (fillBoard())
                            return 1;
                        board[row][col] = EMPTY;
                    }
                }
                return 0;
            }
        }
    }
    return 1;
}

// 移除指定數量的數字作為題目
void removeDigits() {
    int count = NUM_REMOVE;
    while (count > 0) {
        int row = rand() % SIZE;
        int col = rand() % SIZE;
        if (board[row][col] != EMPTY) {
            board[row][col] = EMPTY;
            count--;
        }
    }
}

// 印出目前盤面
void printBoard() {
    for (int i = 0; i < SIZE; i++) {
        if (i % 3 == 0) printf("-------------------------\n");
        for (int j = 0; j < SIZE; j++) {
            if (j % 3 == 0) printf("| ");
            if (board[i][j] == EMPTY)
                printf(". ");
            else
                printf("%d ", board[i][j]);
        }
        printf("|\n");
    }
    printf("-------------------------\n");
}

int main() {
    srand(time(NULL));
    time_t start_time, end_time;

    fillBoard();

    // 儲存正確解答
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            solution[i][j] = board[i][j];

    removeDigits();

    printf("=== 數獨遊戲開始 ===\n");
    printBoard();

    time(&start_time);  // 開始計時

    int r, c, n;
    while (1) {
        printf("輸入 格子列 行 數字 (例如: 0 1 5)，輸入 -1 結束：");
        scanf("%d", &r);
        if (r == -1) break;
        scanf("%d %d", &c, &n);

        if (r < 0 || r >= SIZE || c < 0 || c >= SIZE || n < 1 || n > 9) {
            printf("✘ 輸入範圍錯誤，請重新輸入。\n");
            continue;
        }

        // 檢查是否為題目原始格
        if (solution[r][c] == board[r][c]) {
            printf("✘ 此格子為題目，不能修改！\n");
            continue;
        }

        // 檢查是否違反數獨規則
        if (!isValidMove(r, c, n)) {
            error_count++;
            printf("✘ 違反數獨規則：同行、同列或同區已有 %d。\n", n);
            printf("目前錯誤次數：%d / %d\n", error_count, MAX_ERRORS);
            if (error_count >= MAX_ERRORS) {
                printf("💥 錯誤次數過多，遊戲結束！\n");
                break;
            }
            continue;
        }

        // 檢查是否為正確答案
        if (n == solution[r][c]) {
            board[r][c] = n;
            printf("✔ 正確填入！\n");
        } else {
            error_count++;
            printf("✘ 錯誤！這不是正確答案。\n");
            printf("目前錯誤次數：%d / %d\n", error_count, MAX_ERRORS);
            if (error_count >= MAX_ERRORS) {
                printf("💥 錯誤次數過多，遊戲結束！\n");
                break;
            }
        }

        printBoard();
    }

    time(&end_time);  // 結束計時
    double elapsed = difftime(end_time, start_time);
    printf("⏱️ 你花了 %.0f 秒完成這場遊戲。\n", elapsed);
    printf("🎮 感謝遊玩數獨遊戲！\n");
    return 0;
}
